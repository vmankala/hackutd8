{"version":3,"sources":["recoil-state.ts","components/RevenueHeader.tsx","components/utils.ts","components/RevenueChart.tsx","components/SalesPointCard.tsx","components/SalesPointsHeader.tsx","components/SalesPointCardList.tsx","optimization.ts","useServerConnection.ts","App.tsx","index.tsx"],"names":["useOptimization","atom","key","default","allRequestsAndResponses","currentSalesPoints","selector","get","allData","length","responses","map","d","response","requests","request","recentRequest","recentResponse","salesPoints","salespoint","sale","find","salesPointId","id","undefined","distribution","gasToSell","percent","currentGasAvailable","lastUpdate","timestamps","timestamp","Math","max","revenueTrend","data","index","date","Date","seconds","getSeconds","dateString","getMinutes","getTime","accumRevenue","totalSales","instantRevenue","useStyles","makeStyles","theme","container","width","marginBottom","spacing","flex","display","justifyContent","RevenueHeader","React","memo","classes","useState","now","setNow","useRecoilState","isOptimized","setIsOptimized","updateTs","useRecoilValue","useEffect","interval","setInterval","clearInterval","ago","floor","className","CardHeader","title","subheader","FormControlLabel","control","Checkbox","checked","onChange","name","color","label","Divider","moneyNumber","x","round","toFixed","toString","replace","numberWithCommas","height","gridAutoRows","gridAutoColumns","position","loadingContainer","zIndex","left","top","center","paddingTop","RevenueChart","trend","filter","cumulativeExtent","useMemo","instantExtent","loading","CircularProgress","size","Typography","style","opacity","dims","ComposedChart","XAxis","dataKey","YAxis","offset","value","angle","domain","yAxisId","orientation","tickFormatter","s","String","Number","Tooltip","formatter","Error","CartesianGrid","stroke","Bar","barSize","fill","Line","dot","type","margin","chartContainer","SalesPointCard","salesPoint","prices","Card","raised","SalesPointsHeader","salespoints","flexWrap","SalesPointCardList","salesPointsData","optimalSolution","resources","costsMatrix","profitsMatrix","forEach","scale","scaleLinear","amount","range","price","clamp","costs","profits","n","push","indices","resourceCosts","MAX_CACHE_SIZE","totalArraysToBuild","a","reduce","b","arraySize","row","c","ceil","cache","Array","dp","resourceLeft","i","j","profit","next","result","pickJ","wait","solve","percentages","costsArray","totalPercent","naiveSolution","count","useServerConnection","setConnectionData","isOptimizedRef","useRef","current","ws","WebSocket","addEventListener","message","startsWith","toast","JSON","parse","processRequest","old","newData","slice","send","stringify","event","close","createStyles","flexGrow","textAlign","body","padding","overflow","App","AppBar","Toolbar","variant","styles","join","console","log","friendlyMessage","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.967f73d3.chunk.js","sourcesContent":["import { atom, selector } from 'recoil';\nimport { RequestFromServer, ResponseFromClient } from './optimization';\n\nexport const useOptimization = atom({\n  key: 'optimizedAlgo',\n  default: true,\n});\n\nexport const allRequestsAndResponses = atom({\n  key: 'allRequests',\n  default: [] as {\n    request: RequestFromServer,\n    response: ResponseFromClient,\n  }[],\n});\n\nexport const currentSalesPoints = selector({\n  key: 'currentSalesPoints',\n  get: ({ get }) => {\n    const allData = get(allRequestsAndResponses);\n    if (allData.length === 0) return null;\n    const responses = allData.map((d) => d.response);\n    const requests = allData.map((d) => d.request);\n    const recentRequest = requests[requests.length - 1];\n    const recentResponse = responses[responses.length - 1];\n\n    return recentRequest.salesPoints.map((salespoint) => {\n      const sale = recentResponse.find((d) => d.salesPointId === salespoint.id);\n      if (sale === undefined) return { salespoint, distribution: 0 };\n      const distribution = (recentRequest.gasToSell * sale.percent) / 100;\n      return { salespoint, distribution };\n    });\n  },\n});\n\nexport const currentGasAvailable = selector({\n  key: 'currentGasAvailable',\n  get: ({ get }) => {\n    const allData = get(allRequestsAndResponses);\n    if (allData.length === 0) return null;\n    const requests = allData.map((d) => d.request);\n    const recentRequest = requests[requests.length - 1];\n    return recentRequest.gasToSell;\n  },\n});\n\nexport const lastUpdate = selector({\n  key: 'lastUpdate',\n  get: ({ get }) => {\n    const allData = get(allRequestsAndResponses);\n    if (allData.length === 0) return null;\n    const timestamps = allData.map((d) => d.request.timestamp);\n    return Math.max(...timestamps);\n  },\n});\n\nexport const revenueTrend = selector({\n  key: 'revenue',\n  get: ({ get }) => {\n    const allData = get(allRequestsAndResponses);\n    const trend = allData.map((data, index) => {\n      const date = new Date(data.request.timestamp);\n      const seconds = date.getSeconds();\n      return {\n        dateString: `${date.getMinutes()}:${seconds < 10 ? '0' : ''}${seconds}`,\n        timestamp: date.getTime(),\n        accumRevenue: data.request.totalSales,\n        instantRevenue: index === 0\n          ? 0\n          : allData[index].request.totalSales - allData[index - 1].request.totalSales,\n      };\n    });\n    return trend;\n  },\n});\n","import {\n  CardHeader, Checkbox, Divider, FormControlLabel,\n} from '@material-ui/core';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport React from 'react';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport { lastUpdate, useOptimization } from '../recoil-state';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  container: {\n    width: '100%',\n    marginBottom: theme.spacing(2),\n  },\n  flex: {\n    display: 'flex',\n    justifyContent: 'space-between',\n  },\n}));\n\nexport const RevenueHeader = React.memo(() => {\n  const classes = useStyles();\n  const [now, setNow] = React.useState(Date.now);\n  const [isOptimized, setIsOptimized] = useRecoilState(useOptimization);\n\n  const updateTs = useRecoilValue(lastUpdate);\n\n  React.useEffect(() => {\n    const interval = setInterval(() => {\n      setNow(Date.now());\n    }, 1000);\n    return function cleanup() {\n      clearInterval(interval);\n    };\n  });\n\n  const ago = (function formatTs() {\n    if (updateTs === null) return 'Never';\n    const seconds = Math.max(0, Math.floor((now - updateTs) / 1000));\n    return `${seconds} Second${seconds === 1 ? '' : 's'} Ago`;\n  }());\n\n  return (\n    <div className={classes.container}>\n      <div className={classes.flex}>\n        <CardHeader title=\"Revenue\" subheader={`Last Optimization: ${ago}`} />\n        <FormControlLabel\n          control={(\n            <Checkbox\n              checked={isOptimized}\n              onChange={() => setIsOptimized(!isOptimized)}\n              name=\"checkedB\"\n              color=\"primary\"\n            />\n        )}\n          label=\"Distribute Gas Optimally\"\n        />\n      </div>\n      <Divider />\n    </div>\n  );\n});\n","export function moneyNumber(x: number) {\n  // https://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript\n  const r = (Math.round(x * 100) / 100).toFixed(2);\n  return r.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\n\nexport function numberWithCommas(x: number) {\n  // https://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript\n  const r = Math.round(x);\n  return r.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\n","import { CircularProgress, Typography } from '@material-ui/core';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport React from 'react';\nimport { AutoSizer } from 'react-virtualized';\nimport {\n  Bar, CartesianGrid, ComposedChart, Line, Tooltip, XAxis, YAxis,\n} from 'recharts';\nimport { useRecoilValue } from 'recoil';\nimport { revenueTrend } from '../recoil-state';\nimport { RevenueHeader } from './RevenueHeader';\nimport { numberWithCommas } from './utils';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  container: {\n    width: '100%',\n    height: 400,\n    display: 'grid',\n    gridAutoRows: 'min-content auto',\n    gridAutoColumns: '100%',\n    position: 'relative',\n  },\n  loadingContainer: {\n    width: 200,\n    height: 100,\n    position: 'absolute',\n    zIndex: 1,\n    left: 'calc(50% - 100px)',\n    top: 'calc(50% - 50px)',\n  },\n  center: {\n    display: 'flex',\n    justifyContent: 'space-around',\n    paddingTop: theme.spacing(1),\n  },\n}));\n\nexport const RevenueChart = React.memo(() => {\n  const classes = useStyles();\n  const trend = useRecoilValue(revenueTrend).filter((d) => {\n    const MINUTE = 60 * 1000;\n    const isRecent = d.timestamp > Date.now() - 20 * MINUTE;\n    return isRecent;\n  });\n\n  const cumulativeExtent = React.useMemo(() => {\n    const data = trend.map((d) => d.accumRevenue);\n    if (data.length === 0) return [0, 1000];\n    return [0, Math.round(Math.max(...data) * 1.05)];\n  }, [trend]);\n\n  const instantExtent = React.useMemo(() => {\n    const data = trend.map((d) => d.instantRevenue);\n    if (data.length === 0) return [0, 100];\n    return [0, Math.round(Math.max(...data) * 2)];\n  }, [trend]);\n\n  const loading = trend.length <= 1;\n\n  return (\n    <div className={classes.container}>\n      {\n        loading && (\n        <div className={classes.loadingContainer}>\n          <div className={classes.center}>\n            <CircularProgress size={70} />\n          </div>\n          <div className={classes.center}>\n            <Typography>Revenue Chart Loading</Typography>\n          </div>\n        </div>\n        )\n      }\n      <RevenueHeader />\n      <div style={{ opacity: loading ? 0.3 : 1 }}>\n        <AutoSizer>\n          {(dims) => (\n            <ComposedChart width={dims.width} height={dims.height} data={trend}>\n              <XAxis dataKey=\"dateString\" />\n              <YAxis\n                width={120}\n                label={{\n                  offset: 10, value: 'Cumulative Revenue ($)', angle: -90, position: 'insideBottomLeft',\n                }}\n                domain={cumulativeExtent}\n                yAxisId=\"0\"\n                orientation=\"left\"\n                dataKey=\"accumRevenue\"\n                tickFormatter={(s) => String(numberWithCommas(Number(s)))}\n              />\n              <YAxis\n                width={120}\n                domain={instantExtent}\n                yAxisId=\"1\"\n                orientation=\"right\"\n                dataKey=\"instantRevenue\"\n                label={{\n                  offset: 20, value: 'Instant Revenue ($)', angle: 90, position: 'insideBottomRight',\n                }}\n                tickFormatter={(s) => String(numberWithCommas(Number(s)))}\n              />\n              <Tooltip formatter={(value: any, name: any) => {\n                if (name === 'instantRevenue') {\n                  return [`$${numberWithCommas(value)}`, 'Instantaneous Revenue'];\n                } if (name === 'accumRevenue') {\n                  return [`$${numberWithCommas(value)}`, 'Cumulative Revenue'];\n                }\n                throw Error('unexpected');\n              }}\n              />\n              <CartesianGrid stroke=\"#f5f5f5\" />\n              <Bar yAxisId=\"1\" dataKey=\"instantRevenue\" barSize={20} fill=\"#413ea0\" />\n              <Line dot={false} yAxisId=\"0\" type=\"monotone\" dataKey=\"accumRevenue\" stroke=\"#ff7300\" />\n            </ComposedChart>\n          )}\n        </AutoSizer>\n      </div>\n    </div>\n  );\n});\n","import {\n  Card, CardHeader, Divider,\n} from '@material-ui/core';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport React from 'react';\nimport { AutoSizer } from 'react-virtualized';\nimport {\n  CartesianGrid, ComposedChart, Line, Tooltip, XAxis, YAxis,\n} from 'recharts';\nimport { SalesPoint } from '../optimization';\nimport { moneyNumber, numberWithCommas } from './utils';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  container: {\n    width: 400,\n    height: 400,\n    margin: theme.spacing(2),\n    display: 'grid',\n    gridAutoRows: 'min-content auto',\n    gridAutoColumns: '100%',\n  },\n  chartContainer: {\n    margin: theme.spacing(1),\n  },\n}));\n\ninterface Props {\n  salesPoint: SalesPoint,\n  distribution: number,\n}\n\nexport const SalesPointCard = React.memo(({ salesPoint, distribution }: Props) => {\n  const classes = useStyles();\n  const trend = salesPoint.prices;\n  return (\n    <Card raised className={classes.container}>\n      <div>\n        <CardHeader\n          title={salesPoint.name}\n          subheader={`Last Distributed: ${numberWithCommas(distribution)} MCF`}\n        />\n        <Divider />\n      </div>\n      <div className={classes.chartContainer}>\n        <AutoSizer>\n          {(dims) => (\n            <ComposedChart width={dims.width - 10} height={dims.height} data={trend}>\n              <XAxis\n                dataKey=\"amount\"\n                tickFormatter={(s) => String(numberWithCommas(Number(s)))}\n              />\n              <YAxis\n                tickFormatter={(s) => String(moneyNumber(Number(s)))}\n                width={80}\n                label={{\n                  offset: 10, value: 'Price ($/MCF)', angle: -90, position: 'insideLeft',\n                }}\n                yAxisId=\"0\"\n                orientation=\"left\"\n                dataKey=\"price\"\n              />\n              <Tooltip formatter={(value: any, name: any) => {\n                if (name === 'amount') {\n                  return [`$${numberWithCommas(value)}`, 'Amount of Gas'];\n                } if (name === 'price') {\n                  return [`$${moneyNumber(value)}`, 'Price Willing to Pay'];\n                }\n                throw Error('unexpected');\n              }}\n              />\n              <CartesianGrid stroke=\"#f5f5f5\" />\n\n              <Line dot={false} yAxisId=\"0\" type=\"monotone\" dataKey=\"price\" stroke=\"#ff7300\" />\n            </ComposedChart>\n          )}\n        </AutoSizer>\n      </div>\n    </Card>\n  );\n});\n","import { CardHeader, Divider } from '@material-ui/core';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport React from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { currentGasAvailable, currentSalesPoints } from '../recoil-state';\nimport { numberWithCommas } from './utils';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  container: {\n    width: '100%',\n    marginBottom: theme.spacing(2),\n  },\n}));\n\nexport const SalesPointsHeader = React.memo(() => {\n  const classes = useStyles();\n  const salespoints = useRecoilValue(currentSalesPoints);\n  const gasToSell = useRecoilValue(currentGasAvailable);\n\n  return (\n    <div className={classes.container}>\n      <CardHeader\n        title=\"Sales Points\"\n        subheader={`${(salespoints || []).length} Sales Points | ${numberWithCommas(gasToSell || 0)} MCF to Sell`}\n      />\n      <Divider />\n    </div>\n  );\n});\n","import { makeStyles } from '@material-ui/core/styles';\nimport React from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { currentSalesPoints } from '../recoil-state';\nimport { SalesPointCard } from './SalesPointCard';\nimport { SalesPointsHeader } from './SalesPointsHeader';\n\nconst useStyles = makeStyles(() => ({\n  container: {\n    width: '100%',\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n}));\n\nexport const SalesPointCardList = React.memo(() => {\n  const classes = useStyles();\n  const salesPointsData = useRecoilValue(currentSalesPoints);\n  if (!salesPointsData) return null;\n  return (\n    <div className={classes.container}>\n      <SalesPointsHeader />\n      {\n        salesPointsData\n          .map((data) => (\n            <SalesPointCard\n              distribution={data.distribution}\n              salesPoint={data.salespoint}\n              key={data.salespoint.id}\n            />\n          ))\n      }\n    </div>\n  );\n});\n","import { scaleLinear } from 'd3';\n\n/* eslint-disable no-param-reassign */\ninterface Price {\n  price: number,\n  amount: number,\n}\nexport interface SalesPoint {\n  id: string,\n  name: string,\n  prices: Price[],\n}\nexport interface RequestFromServer {\n  salesPoints: SalesPoint[],\n  gasToSell: number,\n  totalSales: number,\n  timestamp: number,\n}\n\nexport type ResponseFromClient = Array<{\n  salesPointId: string,\n  percent: number\n}>\n\nexport function solve(\n  resources: number,\n  resourceCosts: number[][],\n  profits: number[][],\n  MAX_CACHE_SIZE = 1e5,\n) {\n  // memoizing naively may result in too much memory/time use.\n  // Scale everything down to aproximate an answer while being efficient\n  const totalArraysToBuild = profits.map((a) => a.length).reduce((a, b) => a + b, 0);\n  const arraySize = Math.floor(MAX_CACHE_SIZE / totalArraysToBuild);\n  (function applyScaleFactor() {\n    const scale = arraySize / (resources + 1.01);\n    resources *= scale;\n    resourceCosts = resourceCosts.map((row) => row.map((c) => c * scale));\n    resources = Math.floor(resources);\n    resourceCosts = resourceCosts.map((row) => row.map((c) => Math.ceil(c)));\n  }());\n\n  interface Result {\n    i: number,\n    j: number,\n    profit: number,\n    next: Result | null,\n  }\n\n  // Recursively try every possible i, j combination. Memoize for performance.\n  const cache = profits.map((row) => row.map(() => Array(arraySize).fill(null)));\n  function dp(resourceLeft: number, i: number, j: number): Result {\n    if (i >= profits.length) {\n      return {\n        i, j, profit: 0, next: null,\n      };\n    }\n    if (j >= profits[i].length) {\n      return {\n        i, j, profit: 0, next: null,\n      };\n    }\n    // apply memoization\n    if (cache[i][j][resourceLeft] !== null) {\n      return cache[i][j][resourceLeft];\n    }\n\n    const pickJ = dp(resourceLeft - resourceCosts[i][j], i + 1, 0);\n    const wait = dp(resourceLeft, i, j + 1);\n\n    let result: Result;\n    if (resourceLeft - resourceCosts[i][j] >= 0 && pickJ.profit + profits[i][j] >= wait.profit) {\n      result = {\n        i, j, profit: pickJ.profit + profits[i][j], next: pickJ,\n      };\n    } else {\n      result = {\n        i, j, profit: wait.profit, next: wait,\n      };\n    }\n    cache[i][j][resourceLeft] = result;\n    return result;\n  }\n\n  // Extract the actual indices from the result graph\n  const indices: number[] = [];\n  let data = dp(resources, 0, 0);\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const { next } = data;\n    if (!next) break;\n    if (next.i > data.i) {\n      indices.push(data.j);\n    }\n    data = next;\n  }\n\n  return indices;\n}\n\nfunction optimalSolution(request: RequestFromServer): ResponseFromClient {\n  const resources = request.gasToSell;\n  const costsMatrix: number[][] = [];\n  const profitsMatrix: number[][] = [];\n\n  request.salesPoints.forEach((salespoint) => {\n    const scale = scaleLinear()\n      .domain(salespoint.prices.map((d) => d.amount))\n      .range(salespoint.prices.map((d) => d.price))\n      .clamp(true);\n\n    const costs: number[] = [];\n    const profits: number[] = [];\n\n    for (let n = 0; n <= resources; n += resources / 100) {\n      costs.push(n);\n      profits.push(n * scale(n));\n    }\n    costsMatrix.push(costs);\n    profitsMatrix.push(profits);\n  });\n\n  const indices = solve(resources, costsMatrix, profitsMatrix);\n\n  const percentages = costsMatrix.map((costsArray, index) => {\n    const j = indices[index];\n    const percent = (costsArray[j] * 100) / resources;\n    return percent;\n  });\n  const totalPercent = percentages.reduce((a, b) => a + b, 0);\n\n  // make sure they add to 100%\n  percentages[percentages.length - 1] += (100 - totalPercent);\n\n  return request.salesPoints.map((salesPoint, index) => ({\n    salesPointId: salesPoint.id,\n    percent: percentages[index],\n  }));\n}\n\nfunction naiveSolution(request: RequestFromServer): ResponseFromClient {\n  const count = request.salesPoints.length;\n  return request.salesPoints.map((salesPoint) => ({\n    salesPointId: salesPoint.id,\n    percent: 100 / count,\n  }));\n}\n\n// This just evenly distributes the gas regardless of the prices\n// You should do better!\nexport function processRequest(request: RequestFromServer, optimal = true): ResponseFromClient {\n  if (optimal) {\n    return optimalSolution(request);\n  }\n  return naiveSolution(request);\n}\n","import React from 'react';\nimport { toast } from 'react-toastify';\nimport { useRecoilState } from 'recoil';\nimport { processRequest, RequestFromServer } from './optimization';\nimport { allRequestsAndResponses, useOptimization } from './recoil-state';\n\nexport function useServerConnection() {\n  const [, setConnectionData] = useRecoilState(allRequestsAndResponses);\n  const [isOptimized] = useRecoilState(useOptimization);\n  const isOptimizedRef = React.useRef({ isOptimized });\n  isOptimizedRef.current.isOptimized = isOptimized;\n\n  React.useEffect(() => {\n    const ws = new WebSocket('wss://eog-assessment-server.azurewebsites.net');\n\n    // When the server sends new data, we send how to optimally allocate the gas\n    ws.addEventListener('message', (message) => {\n      if (message.data.startsWith('Error')) {\n        toast(message.data);\n        return;\n      }\n\n      const request: RequestFromServer = JSON.parse(message.data);\n      const response = processRequest(request, isOptimizedRef.current.isOptimized);\n      setConnectionData((old) => {\n        const newData = [...old, { request, response }];\n        const newDataNoMemoryLeak = newData.slice(newData.length - 1e5);\n        return newDataNoMemoryLeak;\n      });\n\n      ws.send(JSON.stringify(response));\n    });\n\n    // Oh no! Something unexpected happened.\n    ws.addEventListener('error', (event) => {\n      toast(JSON.stringify(event));\n    });\n\n    return function cleanup() {\n      setConnectionData([]);\n      ws.close();\n    };\n  }, [setConnectionData]);\n}\n","import AppBar from '@material-ui/core/AppBar';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport React from 'react';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { RevenueChart } from './components/RevenueChart';\nimport { SalesPointCardList } from './components/SalesPointCardList';\nimport { useServerConnection } from './useServerConnection';\n\nconst useStyles = makeStyles((theme: Theme) => createStyles({\n  container: {\n    position: 'absolute',\n    width: '100%',\n    height: '100%',\n    display: 'grid',\n    gridAutoRows: 'min-content auto',\n    gridAutoColumns: '100%',\n  },\n  title: {\n    flexGrow: 1,\n    textAlign: 'left',\n  },\n  body: {\n    padding: theme.spacing(2),\n    overflow: 'auto',\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  useServerConnection();\n\n  return (\n    <div className={classes.container}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h5\" className={classes.title}>\n            EOG Example Assessment\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <div className={classes.body}>\n        <ToastContainer />\n        <RevenueChart />\n        <SalesPointCardList />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {\n  RecoilRoot,\n} from 'recoil';\nimport App from './App';\n\nfunction friendlyMessage() {\n  const styles = [\n    'background: radial-gradient(#D33106, #571402)',\n    'border: 1px solid #3E0E02',\n    'color: white',\n    'display: block',\n    'text-shadow: 0 1px 0 rgba(0, 0, 0, 0.3)',\n    'box-shadow: 0 1px 0 rgba(255, 255, 255, 0.4) inset, 0 5px 3px -5px rgba(0, 0, 0, 0.5), 0 -13px 5px -10px rgba(255, 255, 255, 0.4) inset',\n    'line-height: 40px',\n    'text-align: center',\n    'font-weight: bold',\n    'padding: 5px',\n  ].join(';');\n\n  // eslint-disable-next-line no-console\n  console.log('%c Thanks for applying to EOG!', styles);\n}\nfriendlyMessage();\n\nReactDOM.render(\n  <RecoilRoot>\n    <App />\n  </RecoilRoot>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}